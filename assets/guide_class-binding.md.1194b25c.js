import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.21a77088.js";const u=JSON.parse('{"title":"Class Binding","description":"","frontmatter":{},"headers":[],"relativePath":"guide/class-binding.md","filePath":"guide/class-binding.md","lastUpdated":1706611505000}'),l={name:"guide/class-binding.md"},o=p(`<h1 id="class-binding" tabindex="-1">Class Binding <a class="header-anchor" href="#class-binding" aria-label="Permalink to &quot;Class Binding&quot;">â€‹</a></h1><p>Exposing classes to JavaScript needs a little more work than pure native Node.js addon.</p><p>The difference is, you need to consider whether the runtime support <code>FinalizationRegistry</code> and <code>WeakRef</code> when using emnapi.</p><p>In pure native world, the finalizer callback will be called when the JavaScript object is garbage collected. But emnapi is implemented by JavaScript, calling finalizer relies <code>FinalizationRegistry</code> and <code>WeakRef</code>.</p><p>So if the runtime does not support <code>FinalizationRegistry</code> and <code>WeakRef</code>, you need to expose a method from C/C++ side, named <code>dispose</code> or whatever you like, so that you can manually delete the native instance pointer in JavaScript.</p><p>If the runtime supports <code>FinalizationRegistry</code> and <code>WeakRef</code>, no extra work need to do, it is same as what you do in native Node.js addon.</p><p>Example:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">~MyClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IncrementX</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">x_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetX</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x_; }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SetX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) { x_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance.y_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string y_;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">~MyClass</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IncrementX</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">x_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetX</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x_; }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SetX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { x_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">instance</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance.y_;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string y_;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>Binding the C++ class to JavaScript class:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/** getter and setter */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">incrementX</span><span style="color:#E1E4E8;"> ()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">instance</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * if the runtime does not support FinalizationRegistry and WeakRef,</span></span>
<span class="line"><span style="color:#6A737D;">   * provide a dispose method to manually delete native instance pointer</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/** getter and setter */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">incrementX</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#E36209;">instance</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * if the runtime does not support FinalizationRegistry and WeakRef,</span></span>
<span class="line"><span style="color:#6A737D;">   * provide a dispose method to manually delete native instance pointer</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Use case:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Module.</span><span style="color:#B392F0;">onRuntimeInitialized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MyClass</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Module.emnapiExports.MyClass</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance.</span><span style="color:#B392F0;">incrementX</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(instance.x) </span><span style="color:#6A737D;">// 11</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance.x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(instance.x) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(MyClass.</span><span style="color:#B392F0;">getStringFromInstance</span><span style="color:#E1E4E8;">(instance)) </span><span style="color:#6A737D;">// &quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// if the runtime does not support FinalizationRegistry and WeakRef</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// remember to call \`dispose\` manually</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> FinalizationRegistry </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    instance.</span><span style="color:#B392F0;">dispose</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// After disposing, you should not use the instance any more</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Module.</span><span style="color:#6F42C1;">onRuntimeInitialized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MyClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Module.emnapiExports.MyClass</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  instance.</span><span style="color:#6F42C1;">incrementX</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.x) </span><span style="color:#6A737D;">// 11</span></span>
<span class="line"><span style="color:#24292E;">  instance.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.x) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(MyClass.</span><span style="color:#6F42C1;">getStringFromInstance</span><span style="color:#24292E;">(instance)) </span><span style="color:#6A737D;">// &quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// if the runtime does not support FinalizationRegistry and WeakRef</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// remember to call \`dispose\` manually</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> FinalizationRegistry </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    instance.</span><span style="color:#6F42C1;">dispose</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// After disposing, you should not use the instance any more</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="node-api-implementation" tabindex="-1">Node-API Implementation <a class="header-anchor" href="#node-api-implementation" aria-label="Permalink to &quot;Node-API Implementation&quot;">â€‹</a></h2><h3 id="helper-macros" tabindex="-1">Helper Macros <a class="header-anchor" href="#helper-macros" aria-label="Permalink to &quot;Helper Macros&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;utility&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;memory&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node_api.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;emnapi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NAPI_CALL_BASE</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">the_call</span><span style="color:#E1E4E8;">, ...)                      \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  do {                                                          \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    if ((the_call) != napi_ok) {                                \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      const napi_extended_error_info *error_info;               \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      napi_get_last_error_info((env), &amp;error_info);             \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      bool is_pending;                                          \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      const char* err_message = error_info-&gt;error_message;      \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      napi_is_exception_pending((env), &amp;is_pending);            \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      if (!is_pending) {                                        \\</span></span>
<span class="line"><span style="color:#E1E4E8;">        const char* error_message = err_message != NULL ?       \\</span></span>
<span class="line"><span style="color:#E1E4E8;">          err_message :                                         \\</span></span>
<span class="line"><span style="color:#E1E4E8;">          &quot;empty error message&quot;;                                \\</span></span>
<span class="line"><span style="color:#E1E4E8;">        napi_throw_error((env), NULL, error_message);           \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      }                                                         \\</span></span>
<span class="line"><span style="color:#E1E4E8;">      return __VA_ARGS__;                                       \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    }                                                           \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  } while (0)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">the_call</span><span style="color:#E1E4E8;">)                                \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  NAPI_CALL_BASE(env, the_call, NULL)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">the_call</span><span style="color:#E1E4E8;">)                           \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  NAPI_CALL_BASE(env, the_call)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;utility&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;memory&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node_api.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;emnapi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NAPI_CALL_BASE</span><span style="color:#24292E;">(</span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#E36209;">the_call</span><span style="color:#24292E;">, ...)                      \\</span></span>
<span class="line"><span style="color:#24292E;">  do {                                                          \\</span></span>
<span class="line"><span style="color:#24292E;">    if ((the_call) != napi_ok) {                                \\</span></span>
<span class="line"><span style="color:#24292E;">      const napi_extended_error_info *error_info;               \\</span></span>
<span class="line"><span style="color:#24292E;">      napi_get_last_error_info((env), &amp;error_info);             \\</span></span>
<span class="line"><span style="color:#24292E;">      bool is_pending;                                          \\</span></span>
<span class="line"><span style="color:#24292E;">      const char* err_message = error_info-&gt;error_message;      \\</span></span>
<span class="line"><span style="color:#24292E;">      napi_is_exception_pending((env), &amp;is_pending);            \\</span></span>
<span class="line"><span style="color:#24292E;">      if (!is_pending) {                                        \\</span></span>
<span class="line"><span style="color:#24292E;">        const char* error_message = err_message != NULL ?       \\</span></span>
<span class="line"><span style="color:#24292E;">          err_message :                                         \\</span></span>
<span class="line"><span style="color:#24292E;">          &quot;empty error message&quot;;                                \\</span></span>
<span class="line"><span style="color:#24292E;">        napi_throw_error((env), NULL, error_message);           \\</span></span>
<span class="line"><span style="color:#24292E;">      }                                                         \\</span></span>
<span class="line"><span style="color:#24292E;">      return __VA_ARGS__;                                       \\</span></span>
<span class="line"><span style="color:#24292E;">    }                                                           \\</span></span>
<span class="line"><span style="color:#24292E;">  } while (0)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(</span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#E36209;">the_call</span><span style="color:#24292E;">)                                \\</span></span>
<span class="line"><span style="color:#24292E;">  NAPI_CALL_BASE(env, the_call, NULL)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(</span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#E36209;">the_call</span><span style="color:#24292E;">)                           \\</span></span>
<span class="line"><span style="color:#24292E;">  NAPI_CALL_BASE(env, the_call)</span></span></code></pre></div><h3 id="class-declaration" tabindex="-1">Class Declaration <a class="header-anchor" href="#class-declaration" aria-label="Permalink to &quot;Class Declaration&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    : </span><span style="color:#B392F0;">x_</span><span style="color:#E1E4E8;">(x), </span><span style="color:#B392F0;">y_</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(y)), </span><span style="color:#B392F0;">env_</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">wrapper_</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">~MyClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IncrementX</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">x_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetX</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x_; }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SetX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) { x_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance.y_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string y_;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"> // the following members exist for binding</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_env env_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_ref wrapper_;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> napi_ref constructor_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Destructor</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">hint</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsDispose</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsIncrementX</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsGetX</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsSetX</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsGetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">napi_ref </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::constructor_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    : </span><span style="color:#6F42C1;">x_</span><span style="color:#24292E;">(x), </span><span style="color:#6F42C1;">y_</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(y)), </span><span style="color:#6F42C1;">env_</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">wrapper_</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">~MyClass</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IncrementX</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">x_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetX</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x_; }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SetX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { x_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">instance</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance.y_;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string y_;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"> // the following members exist for binding</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  napi_env env_;</span></span>
<span class="line"><span style="color:#24292E;">  napi_ref wrapper_;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> napi_ref constructor_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Constructor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Destructor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hint</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsDispose</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsIncrementX</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsGetX</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsSetX</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsGetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">napi_ref </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::constructor_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="register-javascript-class" tabindex="-1">Register JavaScript Class <a class="header-anchor" href="#register-javascript-class" aria-label="Permalink to &quot;Register JavaScript Class&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_property_attributes instance_method_attributes </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">napi_property_attributes</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(napi_writable </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> napi_configurable);</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_property_attributes static_method_attributes </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">napi_property_attributes</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(instance_method_attributes </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> napi_static);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_property_descriptor properties[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;incrementX&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      JsIncrementX, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance_method_attributes, </span><span style="color:#79B8FF;">nullptr</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;x&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, JsGetX, JsSetX, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      napi_configurable, </span><span style="color:#79B8FF;">nullptr</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;getStringFromInstance&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      JsGetStringFromInstance, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      static_method_attributes, </span><span style="color:#79B8FF;">nullptr</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;dispose&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      JsDispose, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance_method_attributes, </span><span style="color:#79B8FF;">nullptr</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> property_size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(properties) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(properties[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value ctor;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_define_class</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;MyClass&quot;</span><span style="color:#E1E4E8;">, NAPI_AUTO_LENGTH,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::Constructor, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        property_size, properties, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ctor));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_create_reference</span><span style="color:#E1E4E8;">(env, ctor, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">constructor_));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_set_named_property</span><span style="color:#E1E4E8;">(env, exports, </span><span style="color:#9ECBFF;">&quot;MyClass&quot;</span><span style="color:#E1E4E8;">, ctor));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NAPI_MODULE_INIT</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Register</span><span style="color:#E1E4E8;">(env, exports);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  napi_property_attributes instance_method_attributes </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">napi_property_attributes</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(napi_writable </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> napi_configurable);</span></span>
<span class="line"><span style="color:#24292E;">  napi_property_attributes static_method_attributes </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">napi_property_attributes</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(instance_method_attributes </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> napi_static);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_property_descriptor properties[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;incrementX&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      JsIncrementX, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      instance_method_attributes, </span><span style="color:#005CC5;">nullptr</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;x&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, JsGetX, JsSetX, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      napi_configurable, </span><span style="color:#005CC5;">nullptr</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;getStringFromInstance&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      JsGetStringFromInstance, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      static_method_attributes, </span><span style="color:#005CC5;">nullptr</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;dispose&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      JsDispose, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      instance_method_attributes, </span><span style="color:#005CC5;">nullptr</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> property_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(properties) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(properties[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  napi_value ctor;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_define_class</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;MyClass&quot;</span><span style="color:#24292E;">, NAPI_AUTO_LENGTH,</span></span>
<span class="line"><span style="color:#24292E;">                                        </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::Constructor, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                        property_size, properties, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ctor));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_create_reference</span><span style="color:#24292E;">(env, ctor, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">constructor_));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_set_named_property</span><span style="color:#24292E;">(env, exports, </span><span style="color:#032F62;">&quot;MyClass&quot;</span><span style="color:#24292E;">, ctor));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NAPI_MODULE_INIT</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Register</span><span style="color:#24292E;">(env, exports);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exports;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="javascript-class-constructor" tabindex="-1">JavaScript Class Constructor <a class="header-anchor" href="#javascript-class-constructor" aria-label="Permalink to &quot;JavaScript Class Constructor&quot;">â€‹</a></h3><p>You can use <a href="/emnapi-docs/reference/additional.html#emnapi-is-support-weakref">emnapi_is_support_weakref</a> to determine whether the runtime has <code>FinalizationRegistry</code> and <code>WeakRef</code>, if not, do not pass finalize callback to <code>napi_wrap</code>.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value args[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_cb_info</span><span style="color:#E1E4E8;">(env, info, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">argc, args, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">this_arg, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (argc </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_valuetype valuetype0, valuetype1;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_typeof</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">valuetype0));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_typeof</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">valuetype1));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valuetype0 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_number </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> valuetype1 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_string) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string y;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_value_int32</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">x));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_value_string_utf8</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">len));</span></span>
<span class="line"><span style="color:#E1E4E8;">  y.</span><span style="color:#B392F0;">resize</span><span style="color:#E1E4E8;">(len);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_value_string_utf8</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">y[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], len </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">len));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::unique_ptr</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MyClass</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">make_unique</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">&gt;(x, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance-&gt;env_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> env;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">emnapi_is_support_weakref</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_wrap</span><span style="color:#E1E4E8;">(env,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            this_arg,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            instance.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::Destructor,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;"> /* finalize_hint */</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">instance-&gt;wrapper_));</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_wrap</span><span style="color:#E1E4E8;">(env,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            this_arg,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            instance.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;"> /* finalize_hint */</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  instance.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> this_arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Constructor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  napi_value args[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_cb_info</span><span style="color:#24292E;">(env, info, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">argc, args, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">this_arg, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (argc </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_valuetype valuetype0, valuetype1;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_typeof</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">valuetype0));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_typeof</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">valuetype1));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (valuetype0 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_number </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> valuetype1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_string) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string y;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_value_int32</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">x));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_value_string_utf8</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">len));</span></span>
<span class="line"><span style="color:#24292E;">  y.</span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;">(len);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_value_string_utf8</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">y[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], len </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">len));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::unique_ptr</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MyClass</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">make_unique</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">&gt;(x, y);</span></span>
<span class="line"><span style="color:#24292E;">  instance-&gt;env_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">emnapi_is_support_weakref</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_wrap</span><span style="color:#24292E;">(env,</span></span>
<span class="line"><span style="color:#24292E;">                            this_arg,</span></span>
<span class="line"><span style="color:#24292E;">                            instance.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::Destructor,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span><span style="color:#6A737D;"> /* finalize_hint */</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">instance-&gt;wrapper_));</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_wrap</span><span style="color:#24292E;">(env,</span></span>
<span class="line"><span style="color:#24292E;">                            this_arg,</span></span>
<span class="line"><span style="color:#24292E;">                            instance.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">,</span><span style="color:#6A737D;"> /* finalize_hint */</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  instance.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> this_arg;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="finalizer-and-dispose" tabindex="-1">Finalizer and Dispose <a class="header-anchor" href="#finalizer-and-dispose" aria-label="Permalink to &quot;Finalizer and Dispose&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">~</span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (wrapper_) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_delete_reference</span><span style="color:#E1E4E8;">(env_, wrapper_);</span></span>
<span class="line"><span style="color:#E1E4E8;">    wrapper_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Destructor</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">hint</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  MyClass</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">MyClass</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsDispose</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_cb_info</span><span style="color:#E1E4E8;">(env, info, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">this_arg, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyClass</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_remove_wrap</span><span style="color:#E1E4E8;">(env, this_arg, </span><span style="color:#F97583;">reinterpret_cast&lt;void**&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> instance;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_undefined</span><span style="color:#E1E4E8;">(env, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">undefined));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (wrapper_) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_delete_reference</span><span style="color:#24292E;">(env_, wrapper_);</span></span>
<span class="line"><span style="color:#24292E;">    wrapper_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Destructor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hint</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  MyClass</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">MyClass</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> instance;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsDispose</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_cb_info</span><span style="color:#24292E;">(env, info, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">this_arg, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyClass</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_remove_wrap</span><span style="color:#24292E;">(env, this_arg, </span><span style="color:#D73A49;">reinterpret_cast&lt;void**&gt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> instance;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_value undefined;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_undefined</span><span style="color:#24292E;">(env, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">undefined));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> undefined;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="member-accessor" tabindex="-1">Member Accessor <a class="header-anchor" href="#member-accessor" aria-label="Permalink to &quot;Member Accessor&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsGetX</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_cb_info</span><span style="color:#E1E4E8;">(env, info, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">this_arg, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyClass</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_unwrap</span><span style="color:#E1E4E8;">(env, this_arg, </span><span style="color:#F97583;">reinterpret_cast&lt;void**&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_create_int32</span><span style="color:#E1E4E8;">(env, instance-&gt;</span><span style="color:#B392F0;">GetX</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ret));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsSetX</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_cb_info</span><span style="color:#E1E4E8;">(env, info, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">argc, args, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">this_arg, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_valuetype valuetype0;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_typeof</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">valuetype0));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valuetype0 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_number) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_value_int32</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">x));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyClass</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_unwrap</span><span style="color:#E1E4E8;">(env, this_arg, </span><span style="color:#F97583;">reinterpret_cast&lt;void**&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  instance-&gt;</span><span style="color:#B392F0;">SetX</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_undefined</span><span style="color:#E1E4E8;">(env, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">undefined));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsGetX</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_cb_info</span><span style="color:#24292E;">(env, info, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">this_arg, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyClass</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_unwrap</span><span style="color:#24292E;">(env, this_arg, </span><span style="color:#D73A49;">reinterpret_cast&lt;void**&gt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_value ret;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_create_int32</span><span style="color:#24292E;">(env, instance-&gt;</span><span style="color:#6F42C1;">GetX</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ret));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsSetX</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  napi_value args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_cb_info</span><span style="color:#24292E;">(env, info, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">argc, args, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">this_arg, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_valuetype valuetype0;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_typeof</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">valuetype0));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (valuetype0 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_number) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_value_int32</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">x));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyClass</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_unwrap</span><span style="color:#24292E;">(env, this_arg, </span><span style="color:#D73A49;">reinterpret_cast&lt;void**&gt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  instance-&gt;</span><span style="color:#6F42C1;">SetX</span><span style="color:#24292E;">(x);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_value undefined;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_undefined</span><span style="color:#24292E;">(env, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">undefined));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> undefined;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="instance-method" tabindex="-1">Instance Method <a class="header-anchor" href="#instance-method" aria-label="Permalink to &quot;Instance Method&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsIncrementX</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_cb_info</span><span style="color:#E1E4E8;">(env, info, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">this_arg, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyClass</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_unwrap</span><span style="color:#E1E4E8;">(env, this_arg, </span><span style="color:#F97583;">reinterpret_cast&lt;void**&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  instance-&gt;</span><span style="color:#B392F0;">IncrementX</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_undefined</span><span style="color:#E1E4E8;">(env, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">undefined));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsIncrementX</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  napi_value this_arg;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_cb_info</span><span style="color:#24292E;">(env, info, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">this_arg, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyClass</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_unwrap</span><span style="color:#24292E;">(env, this_arg, </span><span style="color:#D73A49;">reinterpret_cast&lt;void**&gt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  instance-&gt;</span><span style="color:#6F42C1;">IncrementX</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_value undefined;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_undefined</span><span style="color:#24292E;">(env, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">undefined));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> undefined;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="static-method" tabindex="-1">Static Method <a class="header-anchor" href="#static-method" aria-label="Permalink to &quot;Static Method&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsGetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_cb_info</span><span style="color:#E1E4E8;">(env, info, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">argc, args, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (argc </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_valuetype valuetype0;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_typeof</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">valuetype0));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valuetype0 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_object) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyClass</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_unwrap</span><span style="color:#E1E4E8;">(env, args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">reinterpret_cast&lt;void**&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">instance);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_create_string_utf8</span><span style="color:#E1E4E8;">(env, result.</span><span style="color:#B392F0;">c_str</span><span style="color:#E1E4E8;">(), result.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ret));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsGetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  napi_value args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_cb_info</span><span style="color:#24292E;">(env, info, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">argc, args, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (argc </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_valuetype valuetype0;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_typeof</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">valuetype0));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (valuetype0 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_object) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyClass</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_unwrap</span><span style="color:#24292E;">(env, args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">reinterpret_cast&lt;void**&gt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">instance)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">instance);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_value ret;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_create_string_utf8</span><span style="color:#24292E;">(env, result.</span><span style="color:#6F42C1;">c_str</span><span style="color:#24292E;">(), result.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ret));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="node-addon-api-implementation" tabindex="-1">node-addon-api Implementation <a class="header-anchor" href="#node-addon-api-implementation" aria-label="Permalink to &quot;node-addon-api Implementation&quot;">â€‹</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>can not</strong> use node-addon-api if the runtime does not support <code>FinalizationRegistry</code> and <code>WeakRef</code>.</p></div><h3 id="class-declaration-1" tabindex="-1">Class Declaration <a class="header-anchor" href="#class-declaration-1" aria-label="Permalink to &quot;Class Declaration&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;utility&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;napi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">): </span><span style="color:#B392F0;">x_</span><span style="color:#E1E4E8;">(x), </span><span style="color:#B392F0;">y_</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">move</span><span style="color:#E1E4E8;">(y)) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IncrementX</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">x_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetX</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x_; }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SetX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) { x_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance.y_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">protected:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::string y_;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::FunctionReference constructor_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsIncrementX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsGetX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsSetX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsGetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::FunctionReference </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::constructor_;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;utility&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;napi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">): </span><span style="color:#6F42C1;">x_</span><span style="color:#24292E;">(x), </span><span style="color:#6F42C1;">y_</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(y)) {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IncrementX</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">x_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetX</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x_; }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SetX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { x_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">instance</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance.y_;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">protected:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::string y_;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::FunctionReference constructor_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsIncrementX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsGetX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsSetX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsGetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::FunctionReference </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::constructor_;</span></span></code></pre></div><h3 id="register-javascript-class-1" tabindex="-1">Register JavaScript Class <a class="header-anchor" href="#register-javascript-class-1" aria-label="Permalink to &quot;Register JavaScript Class&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Register</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_property_attributes method_attributes </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">napi_property_attributes</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(napi_writable </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> napi_configurable);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Function ctor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefineClass</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;MyClass&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">InstanceMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsIncrementX</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&quot;incrementX&quot;</span><span style="color:#E1E4E8;">, method_attributes),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">InstanceAccessor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsGetX</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsSetX</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&quot;x&quot;</span><span style="color:#E1E4E8;">, napi_configurable),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">StaticMethod</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsGetStringFromInstance</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&quot;getStringFromInstance&quot;</span><span style="color:#E1E4E8;">, method_attributes),</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  constructor_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Persistent</span><span style="color:#E1E4E8;">(ctor);</span></span>
<span class="line"><span style="color:#E1E4E8;">  exports.</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MyClass&quot;</span><span style="color:#E1E4E8;">, ctor);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Register</span><span style="color:#E1E4E8;">(env, exports);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_API_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Register</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  napi_property_attributes method_attributes </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">napi_property_attributes</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(napi_writable </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> napi_configurable);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Function ctor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefineClass</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;MyClass&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">InstanceMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsIncrementX</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;incrementX&quot;</span><span style="color:#24292E;">, method_attributes),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">InstanceAccessor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsGetX</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsSetX</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;x&quot;</span><span style="color:#24292E;">, napi_configurable),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">StaticMethod</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsGetStringFromInstance</span><span style="color:#24292E;">&gt;(</span><span style="color:#032F62;">&quot;getStringFromInstance&quot;</span><span style="color:#24292E;">, method_attributes),</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  constructor_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Persistent</span><span style="color:#24292E;">(ctor);</span></span>
<span class="line"><span style="color:#24292E;">  exports.</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MyClass&quot;</span><span style="color:#24292E;">, ctor);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Register</span><span style="color:#24292E;">(env, exports);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exports;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_API_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Init)</span></span></code></pre></div><h3 id="javascript-class-constructor-1" tabindex="-1">JavaScript Class Constructor <a class="header-anchor" href="#javascript-class-constructor-1" aria-label="Permalink to &quot;JavaScript Class Constructor&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> info):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">&gt;(info), </span><span style="color:#B392F0;">MyClass</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Env env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">IsNumber</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">info[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">IsString</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  x_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Number</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Int32Value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  y_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Utf8Value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> info):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">&gt;(info), </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Env env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.</span><span style="color:#6F42C1;">Length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">IsNumber</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">info[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">IsString</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  x_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Number</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Int32Value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  y_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Utf8Value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="member-accessor-1" tabindex="-1">Member Accessor <a class="header-anchor" href="#member-accessor-1" aria-label="Permalink to &quot;Member Accessor&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsGetX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">static_cast&lt;double&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GetX</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsSetX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">IsNumber</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">SetX</span><span style="color:#E1E4E8;">(value.As</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Number</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Int32Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsGetX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">static_cast&lt;double&gt;</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GetX</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsSetX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">IsNumber</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">SetX</span><span style="color:#24292E;">(value.As</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Number</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Int32Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="instance-method-1" tabindex="-1">Instance Method <a class="header-anchor" href="#instance-method-1" aria-label="Permalink to &quot;Instance Method&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsIncrementX</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">IncrementX</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Env env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Undefined</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsIncrementX</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">IncrementX</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Env env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Undefined</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="static-method-1" tabindex="-1">Static Method <a class="header-anchor" href="#static-method-1" aria-label="Permalink to &quot;Static Method&quot;">â€‹</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsMyClass</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">JsGetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Env env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">IsObject</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  JsMyClass</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Unwrap</span><span style="color:#E1E4E8;">(info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">GetStringFromInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">instance));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsMyClass</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">JsGetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Env env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.</span><span style="color:#6F42C1;">Length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">IsObject</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  JsMyClass</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Unwrap</span><span style="color:#24292E;">(info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">GetStringFromInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">instance));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,44),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const _=s(l,[["render",t]]);export{u as __pageData,_ as default};
