import{_ as a,o as s,c as n,Q as e}from"./chunks/framework.21a77088.js";const u=JSON.parse('{"title":"API 列表","description":"","frontmatter":{"sidebarDepth":4},"headers":[],"relativePath":"zh/reference/list.md","filePath":"zh/reference/list.md","lastUpdated":1706535803000}'),l={name:"zh/reference/list.md"},o=e(`<h1 id="api-列表" tabindex="-1">API 列表 <a class="header-anchor" href="#api-列表" aria-label="Permalink to &quot;API 列表&quot;">​</a></h1><h2 id="不可用的-api" tabindex="-1">不可用的 API <a class="header-anchor" href="#不可用的-api" aria-label="Permalink to &quot;不可用的 API&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>以下 API 不可用，在运行时抛出 JavaScript Error。</p></div><h4 id="node-api-h" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h" aria-label="Permalink to &quot;node_api.h&quot;">​</a></h4><ul><li><s>napi_open_callback_scope</s></li><li><s>napi_close_callback_scope</s></li></ul><h2 id="受限的-api" tabindex="-1">受限的 API <a class="header-anchor" href="#受限的-api" aria-label="Permalink to &quot;受限的 API&quot;">​</a></h2><h3 id="引用相关" tabindex="-1">引用相关 <a class="header-anchor" href="#引用相关" aria-label="Permalink to &quot;引用相关&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果运行时不支持 <a href="https://www.caniuse.com/?search=FinalizationRegistry" target="_blank" rel="noreferrer">FinalizationRegistry</a> 和 <a href="https://www.caniuse.com/?search=WeakRef" target="_blank" rel="noreferrer">WeakRef</a>，下面的 API 有一定的限制，无论引用计数是否为 0，所有引用都是强引用。</p></div><h4 id="js-native-api-h" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h" aria-label="Permalink to &quot;js_native_api.h&quot;">​</a></h4><ul><li><em><strong>napi_wrap</strong></em>: <code>finalize_cb</code> 和 <code>result</code> 必须传 <code>NULL</code>, 稍后必须调用 <code>napi_remove_wrap</code></li><li><em><strong>napi_create_external</strong></em>: <code>finalize_cb</code> 必须传 <code>NULL</code></li><li><em><strong>napi_create_reference</strong></em>: 即使传 <code>0</code> 给 <code>initial_refcount</code> 也创建强引用</li><li><em><strong>napi_reference_unref</strong></em>: 即使计数为 0，该引用仍然是强引用</li><li><em><strong>napi_add_finalizer</strong></em>: 不可用，总是抛出错误</li></ul><h3 id="bigint-相关" tabindex="-1">BigInt 相关 <a class="header-anchor" href="#bigint-相关" aria-label="Permalink to &quot;BigInt 相关&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>以下 API 需要 <a href="https://www.caniuse.com/?search=BigInt" target="_blank" rel="noreferrer">BigInt</a> (v8 引擎 v6.7+ / Node.js v10.4.0+)，如果运行时不支持，则抛出错误。</p></div><h4 id="js-native-api-h-1" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h-1" aria-label="Permalink to &quot;js_native_api.h&quot;">​</a></h4><ul><li><em><strong>napi_create_bigint_int64</strong></em></li><li><em><strong>napi_create_bigint_uint64</strong></em></li><li><em><strong>napi_create_bigint_words</strong></em></li><li><em><strong>napi_get_value_bigint_int64</strong></em></li><li><em><strong>napi_get_value_bigint_uint64</strong></em></li><li><em><strong>napi_get_value_bigint_words</strong></em></li></ul><h3 id="arraybuffer-相关" tabindex="-1">ArrayBuffer 相关 <a class="header-anchor" href="#arraybuffer-相关" aria-label="Permalink to &quot;ArrayBuffer 相关&quot;">​</a></h3><table><thead><tr><th>API</th><th>内存复制发生的条件</th><th><code>data</code> 复制方向</th><th><code>data</code> 所有权</th></tr></thead><tbody><tr><td><code>napi_create_arraybuffer</code></td><td>用户请求返回 <code>data</code></td><td><code>从 JS 到 WASM</code></td><td>如果发生了内存复制，且运行时支持 <code>FinalizationRegistry</code>，则由 <code>emnapi</code> 管理，否则用户需要手动释放 <code>data</code> 内存</td></tr><tr><td><code>napi_create_external_arraybuffer</code></td><td>总是复制</td><td><code>从 WASM 到 JS</code></td><td>用户</td></tr><tr><td><code>napi_get_arraybuffer_info</code></td><td>(用户请求返回 <code>data</code>) <code>&amp;&amp;</code> (ArrayBuffer 不是由 emnapi 创建的 <code>||</code> 由 <code>napi_create_arraybuffer</code> 创建但用户未请求返回 <code>data</code>)</td><td><code>从 JS 到 WASM</code></td><td>如果发生了内存复制，规则与 <code>napi_create_arraybuffer</code> 相同</td></tr><tr><td><code>napi_get_typedarray_info</code> <br><br> <code>napi_get_dataview_info</code> <br><br> <code>napi_get_buffer_info</code> (<code>node_api.h</code>)</td><td>(用户请求返回 <code>data</code>) <code>&amp;&amp;</code> (不是 wasm 内存视图) <code>&amp;&amp;</code> (<code>napi_get_arraybuffer_info</code> 规则同样适用于它的 ArrayBuffer)</td><td><code>从 JS 到 WASM</code></td><td>如果发生了内存复制，规则与 <code>napi_create_arraybuffer</code> 相同</td></tr><tr><td><code>napi_create_buffer</code></td><td>不会发生复制。如果用户请求返回 <code>data</code>，则新分配内存然后直接从这块内存创建 Buffer 视图，否则用 <code>Buffer.alloc</code> 创建 Buffer</td><td></td><td>如果用户请求返回 <code>data</code>，规则与 <code>napi_create_arraybuffer</code> 相同</td></tr><tr><td><code>napi_create_external_buffer</code></td><td>不会发生复制。从 <code>data</code> 地址直接创建 Buffer 视图</td><td></td><td>用户</td></tr></tbody></table><p>你可以使用 <code>emnapi_sync_memory</code> 或导出运行时方法 <code>emnapiSyncMemory</code> 来同步 wasm 和 JS 的内存。当 wasm 内存增长或单边内存变化时，它是必要的。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;emnapi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">napi_status </span><span style="color:#B392F0;">emnapi_sync_memory</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">js_to_wasm</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                               napi_value</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arraybuffer_or_view</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">byte_offset</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finalizer</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">finalize_data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">finalize_hint</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(finalize_data);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">napi_value </span><span style="color:#B392F0;">createExternalArraybuffer</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, napi_callback_info </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> external_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">external_data</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">external_data</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">external_data</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value array_buffer;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">napi_create_external_arraybuffer</span><span style="color:#E1E4E8;">(env, external_data, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, finalizer, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">array_buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">external_data</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> // JavaScript ArrayBuffer 内存不会改变</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">emnapi_sync_memory</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, array_buffer, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, NAPI_AUTO_LENGTH);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 同步后，new Uint8Array(array_buffer)[0] === 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> array_buffer;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;emnapi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">napi_status </span><span style="color:#6F42C1;">emnapi_sync_memory</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">js_to_wasm</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                               napi_value</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arraybuffer_or_view</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">byte_offset</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finalizer</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">finalize_data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">finalize_hint</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(finalize_data);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">napi_value </span><span style="color:#6F42C1;">createExternalArraybuffer</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, napi_callback_info </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> external_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">external_data</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">external_data</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">external_data</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  napi_value array_buffer;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">napi_create_external_arraybuffer</span><span style="color:#24292E;">(env, external_data, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, finalizer, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">array_buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">external_data</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // JavaScript ArrayBuffer 内存不会改变</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">emnapi_sync_memory</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, array_buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, NAPI_AUTO_LENGTH);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 同步后，new Uint8Array(array_buffer)[0] === 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> array_buffer;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">emnapiSyncMemory</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">jsToWasm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">arrayBufferOrView</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBufferView</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">byteOffset</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">length</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array_buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Module.emnapiExports.</span><span style="color:#B392F0;">createExternalArraybuffer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(array_buffer)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">Module.</span><span style="color:#B392F0;">emnapiSyncMemory</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, array_buffer)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emnapiSyncMemory</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">jsToWasm</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">arrayBufferOrView</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBufferView</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">byteOffset</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">length</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array_buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Module.emnapiExports.</span><span style="color:#6F42C1;">createExternalArraybuffer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(array_buffer)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">Module.</span><span style="color:#6F42C1;">emnapiSyncMemory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, array_buffer)</span></span></code></pre></div><p>你可以使用 <code>emnapi_get_memory_address</code> 或导出运行时方法 <code>emnapiGetMemoryAddress</code> 来检查内存是否需要由你来手动释放。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;emnapi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#B392F0;">napi_get_typedarray_info</span><span style="color:#E1E4E8;">(env, typedarray, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> address;</span></span>
<span class="line"><span style="color:#E1E4E8;">emnapi_ownership ownership;</span></span>
<span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> runtime_allocated;</span></span>
<span class="line"><span style="color:#B392F0;">emnapi_get_memory_address</span><span style="color:#E1E4E8;">(env, typedarray, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">ownership</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">runtime_allocated</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(address </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> data);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (data </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> runtime_allocated </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> ownership </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> emnapi_userland) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用户需要手动释放内存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// free(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;emnapi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#6F42C1;">napi_get_typedarray_info</span><span style="color:#24292E;">(env, typedarray, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> address;</span></span>
<span class="line"><span style="color:#24292E;">emnapi_ownership ownership;</span></span>
<span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> runtime_allocated;</span></span>
<span class="line"><span style="color:#6F42C1;">emnapi_get_memory_address</span><span style="color:#24292E;">(env, typedarray, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">address</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">ownership</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">runtime_allocated</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(address </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> data);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> runtime_allocated </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> ownership </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> emnapi_userland) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用户需要手动释放内存</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// free(data);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>emnapi_get_memory_address</code> 对 wasm 内存视图可能会返回错误的 <code>ownership</code> 和 <code>runtime_allocated</code>。比如说，你使用 <code>napi_create_arraybuffer</code> 创建了一个 <code>ArrayBbuffer</code> 并且请求了返回 <code>data</code> 地址，然后用 <code>napi_create_external_buffer</code> 从 <code>data</code> 创建了一个视图。</p></div><h3 id="buffer-相关" tabindex="-1">Buffer 相关 <a class="header-anchor" href="#buffer-相关" aria-label="Permalink to &quot;Buffer 相关&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>以下 API 需要 <code>globalThis.Buffer</code>，否则将返回 <code>napi_invalid_arg</code> 或 <code>napi_pending_exception</code>。</p><p>如果你想在浏览器中使用它们，你可以引入 <a href="https://github.com/feross/buffer" target="_blank" rel="noreferrer">feross/buffer</a>。</p></div><ul><li><em><strong>napi_create_buffer</strong></em></li><li><em><strong>napi_create_external_buffer</strong></em></li><li><em><strong>napi_create_buffer_copy</strong></em></li><li><em><strong>napi_is_buffer</strong></em></li><li><em><strong>napi_get_buffer_info</strong></em></li></ul><h3 id="清理钩子相关" tabindex="-1">清理钩子相关 <a class="header-anchor" href="#清理钩子相关" aria-label="Permalink to &quot;清理钩子相关&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>清理钩子会被添加在 <code>Context</code> 上，当 <code>Context</code> dispose 时它们会被调用。</p><p>特别地，在 Node.js 环境中，<code>Context.prototype.dispose</code> 会在 process <code>beforeExit</code> 事件中自动调用。</p></div><h4 id="node-api-h-1" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-1" aria-label="Permalink to &quot;node_api.h&quot;">​</a></h4><ul><li><em><strong>napi_add_env_cleanup_hook</strong></em></li><li><em><strong>napi_remove_env_cleanup_hook</strong></em></li><li><em><strong>napi_add_async_cleanup_hook</strong></em></li><li><em><strong>napi_remove_async_cleanup_hook</strong></em></li></ul><h3 id="内存管理" tabindex="-1">内存管理 <a class="header-anchor" href="#内存管理" aria-label="Permalink to &quot;内存管理&quot;">​</a></h3><h4 id="js-native-api-h-2" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h-2" aria-label="Permalink to &quot;js_native_api.h&quot;">​</a></h4><ul><li><em><strong>napi_adjust_external_memory</strong></em> (<code>change_in_bytes</code> 必须是正整数)</li></ul><h3 id="node-js-上的异步操作" tabindex="-1">Node.js 上的异步操作 <a class="header-anchor" href="#node-js-上的异步操作" aria-label="Permalink to &quot;Node.js 上的异步操作&quot;">​</a></h3><h4 id="node-api-h-2" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-2" aria-label="Permalink to &quot;node_api.h&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>以下 API 仅在 Node.js 运行时支持，并且需要 <code>@emnapi/node-binding</code> 并在调用 <code>emnapiInit</code> 时传入。</p></div><ul><li><em><strong>napi_async_init</strong></em></li><li><em><strong>napi_async_destroy</strong></em></li><li><em><strong>napi_make_callback</strong></em></li></ul><h3 id="多线程相关" tabindex="-1">多线程相关 <a class="header-anchor" href="#多线程相关" aria-label="Permalink to &quot;多线程相关&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这些 API 需要 Emscripten pthread 支持（<code>-pthread</code>），建议明确指定线程池大小（<code>-sPTHREAD_POOL_SIZE=4</code>）。</p><p>要求目标环境有 <code>Worker</code> 和 <code>SharedArrayBuffer</code> 支持。如果目标环境是浏览器，则需要</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cross-Origin-Opener-Policy: same-origin</span></span>
<span class="line"><span style="color:#e1e4e8;">Cross-Origin-Embedder-Policy: require-corp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cross-Origin-Opener-Policy: same-origin</span></span>
<span class="line"><span style="color:#24292e;">Cross-Origin-Embedder-Policy: require-corp</span></span></code></pre></div><p>在响应头中。</p><p><code>async_resource</code> 和 <code>async_resource_name</code> 参数在浏览器环境中没有效果，仅在 Node.js 运行时支持，并且需要 <code>@emnapi/node-binding</code> 并在调用 <code>emnapiInit</code> 时传入。</p></div><h4 id="node-api-h-3" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-3" aria-label="Permalink to &quot;node_api.h&quot;">​</a></h4><ul><li><em><strong>napi_create_async_work</strong></em></li><li><em><strong>napi_delete_async_work</strong></em></li><li><em><strong>napi_queue_async_work</strong></em></li><li><em><strong>napi_cancel_async_work</strong></em></li><li><em><strong>napi_create_threadsafe_function</strong></em></li><li><em><strong>napi_get_threadsafe_function_context</strong></em></li><li><em><strong>napi_call_threadsafe_function</strong></em></li><li><em><strong>napi_acquire_threadsafe_function</strong></em></li><li><em><strong>napi_release_threadsafe_function</strong></em></li><li><em><strong>napi_unref_threadsafe_function</strong></em></li><li><em><strong>napi_ref_threadsafe_function</strong></em></li></ul><h3 id="other-api" tabindex="-1">Other API <a class="header-anchor" href="#other-api" aria-label="Permalink to &quot;Other API&quot;">​</a></h3><h4 id="node-api-h-4" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-4" aria-label="Permalink to &quot;node_api.h&quot;">​</a></h4><ul><li><em><strong>napi_get_uv_event_loop</strong></em>: 如果启用了 pthread，则返回线程池相关函数使用的假 <code>uv_loop_t</code>。</li><li><em><strong>napi_fatal_exception</strong></em>: 在 Node.js 环境中调用 <code>process._fatalException</code>。在非 Node.js 环境中返回 <code>napi_generic_failure</code>。</li><li><em><strong>node_api_get_module_file_name</strong></em>: 返回 <code>Module.emnapiInit({ context, filename })</code> 传入的 filename。</li></ul><h2 id="任何时候都可用的-api" tabindex="-1">任何时候都可用的 API <a class="header-anchor" href="#任何时候都可用的-api" aria-label="Permalink to &quot;任何时候都可用的 API&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请放心使用以下 API。</p></div><h4 id="js-native-api-h-3" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h-3" aria-label="Permalink to &quot;js_native_api.h&quot;">​</a></h4><ul><li>napi_get_last_error_info</li><li>napi_get_undefined</li><li>napi_get_null</li><li>napi_get_global</li><li>napi_get_boolean</li><li>napi_create_object</li><li>napi_create_array</li><li>napi_create_array_with_length</li><li>napi_create_double</li><li>napi_create_int32</li><li>napi_create_uint32</li><li>napi_create_int64</li><li>napi_create_string_latin1</li><li>napi_create_string_utf8</li><li>napi_create_string_utf16</li><li>napi_create_symbol</li><li><strong>node_api_symbol_for (NAPI_EXPERIMENTAL)</strong></li><li>napi_create_function</li><li>napi_create_error</li><li>napi_create_type_error</li><li>napi_create_range_error</li><li><strong>node_api_create_syntax_error (NAPI_EXPERIMENTAL)</strong></li><li>napi_typeof</li><li>napi_get_value_double</li><li>napi_get_value_int32</li><li>napi_get_value_uint32</li><li>napi_get_value_int64</li><li>napi_get_value_bool</li><li>napi_get_value_string_latin1</li><li>napi_get_value_string_utf8</li><li>napi_get_value_string_utf16</li><li>napi_coerce_to_bool</li><li>napi_coerce_to_number</li><li>napi_coerce_to_object</li><li>napi_coerce_to_string</li><li>napi_get_prototype</li><li>napi_get_property_names</li><li>napi_set_property</li><li>napi_has_property</li><li>napi_get_property</li><li>napi_delete_property</li><li>napi_has_own_property</li><li>napi_set_named_property</li><li>napi_has_named_property</li><li>napi_get_named_property</li><li>napi_set_element</li><li>napi_has_element</li><li>napi_get_element</li><li>napi_delete_element</li><li>napi_define_properties</li><li>napi_is_array</li><li>napi_get_array_length</li><li>napi_strict_equals</li><li>napi_call_function</li><li>napi_new_instance</li><li>napi_instanceof</li><li>napi_get_cb_info</li><li>napi_get_new_target</li><li>napi_define_class</li><li>napi_open_handle_scope</li><li>napi_close_handle_scope</li><li>napi_open_escapable_handle_scope</li><li>napi_close_escapable_handle_scope</li><li>napi_escape_handle</li><li>napi_throw</li><li>napi_throw_error</li><li>napi_throw_type_error</li><li>napi_throw_range_error</li><li><strong>node_api_throw_syntax_error (NAPI_EXPERIMENTAL)</strong></li><li>napi_is_error</li><li>napi_is_exception_pending</li><li>napi_get_and_clear_last_exception</li><li>napi_is_arraybuffer</li><li>napi_is_typedarray</li><li>napi_create_typedarray</li><li>napi_create_dataview</li><li>napi_is_dataview</li><li>napi_detach_arraybuffer</li><li>napi_is_detached_arraybuffer</li><li>napi_get_version</li><li>napi_create_promise</li><li>napi_resolve_deferred</li><li>napi_reject_deferred</li><li>napi_is_promise</li><li>napi_run_script</li><li>napi_create_date</li><li>napi_is_date</li><li>napi_get_date_value</li><li>napi_get_all_property_names</li><li>napi_set_instance_data</li><li>napi_get_instance_data</li><li>napi_object_freeze</li><li>napi_object_seal</li><li>napi_type_tag_object</li><li>napi_check_object_type_tag</li><li>napi_unwrap</li><li>napi_remove_wrap</li><li>napi_get_value_external</li><li>napi_delete_reference</li><li>napi_reference_ref</li><li>napi_get_reference_value</li></ul><h4 id="node-api-h-5" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-5" aria-label="Permalink to &quot;node_api.h&quot;">​</a></h4><ul><li>napi_fatal_error</li><li>napi_get_node_version</li></ul>`,49),p=[o];function r(t,c,i,y,_,d){return s(),n("div",null,p)}const f=a(l,[["render",r]]);export{u as __pageData,f as default};
