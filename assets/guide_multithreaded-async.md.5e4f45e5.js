import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.c6d1d410.js";const u=JSON.parse('{"title":"Multithreaded Asynchronous Operations","description":"","frontmatter":{},"headers":[],"relativePath":"guide/multithreaded-async.md","filePath":"guide/multithreaded-async.md","lastUpdated":1698230210000}'),p={name:"guide/multithreaded-async.md"},o=l(`<h1 id="multithreaded-asynchronous-operations" tabindex="-1">Multithreaded Asynchronous Operations <a class="header-anchor" href="#multithreaded-asynchronous-operations" aria-label="Permalink to &quot;Multithreaded Asynchronous Operations&quot;">​</a></h1><ul><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_create_async_work" target="_blank" rel="noreferrer">napi_create_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_delete_async_work" target="_blank" rel="noreferrer">napi_delete_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_queue_async_work" target="_blank" rel="noreferrer">napi_queue_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_cancel_async_work" target="_blank" rel="noreferrer">napi_cancel_async_work</a></li></ul><p>Emnapi has 3 implementations of async work and 2 implementations of TSFN:</p><ul><li>Async work <ul><li>A. Libuv threadpool and pthread based implementation in C</li><li>B. Single thread mock in JavaScript</li><li>C. Web worker based implementation in C (stack allocation) and JavaScript</li></ul></li><li>TSFN <ul><li>D. Libuv and pthread based implementation in C</li><li>E. Web worker based implementation in JavaScript</li></ul></li></ul><table><thead><tr><th></th><th>Library to Link</th><th><code>wasm32-emscripten</code></th><th><code>wasm32</code></th><th><code>wasm32-wasi</code></th><th><code>wasm32-wasi-threads</code></th></tr></thead><tbody><tr><td>A</td><td>libemnapi-mt.a</td><td>✅</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>B</td><td>libemnapi-basic(-mt).a</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>C</td><td>libemnapi-basic-mt.a</td><td>❌</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>D</td><td>libemnapi-mt.a</td><td>✅</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>E</td><td>libemnapi-basic(-mt).a</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><p>There are some limitations on browser about wasi-libc&#39;s pthread implementation, for example <code>pthread_mutex_lock</code> may call <code>__builtin_wasm_memory_atomic_wait32</code>(<code>memory.atomic.wait32</code>) which is disallowed in browser JS main thread. While Emscripten&#39;s pthread implementation has considered usage in browser. If you need to run your addon with multithreaded features on browser, we recommend you use Emscripten A &amp; D, or bare wasm32 C &amp; E.</p><p>Note: For browsers, all the multithreaded features relying on Web Workers (Emscripten pthread also relying on Web Workers) require cross-origin isolation to enable <code>SharedArrayBuffer</code>. You can make a page cross-origin isolated by serving the page with these headers:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cross-Origin-Embedder-Policy: require-corp</span></span>
<span class="line"><span style="color:#e1e4e8;">Cross-Origin-Opener-Policy: same-origin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cross-Origin-Embedder-Policy: require-corp</span></span>
<span class="line"><span style="color:#24292e;">Cross-Origin-Opener-Policy: same-origin</span></span></code></pre></div><p>If you would like to avoid <code>SharedArrayBuffer</code> and cross-origin isolation, please use B &amp; E (link <code>libemnapi-basic.a</code>), see the following table for more details.</p><h2 id="about-prebuilt-libraries" tabindex="-1">About Prebuilt Libraries <a class="header-anchor" href="#about-prebuilt-libraries" aria-label="Permalink to &quot;About Prebuilt Libraries&quot;">​</a></h2><p>Prebuilt libraries can be found in the <code>lib</code> directory in <code>emnapi</code> npm package.</p><table><thead><tr><th>Library</th><th>Description</th><th><code>wasm32-emscripten</code></th><th><code>wasm32</code></th><th><code>wasm32-wasi</code></th><th><code>wasm32-wasi-threads</code></th></tr></thead><tbody><tr><td>libemnapi.a</td><td>no atomics feature.<br><br> no libuv port.<br><br> <code>napi_*_async_work</code> and <code>napi_*_threadsafe_function</code> always return <code>napi_generic_failure</code>.</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>libemnapi-mt.a</td><td>atomics feature enabled.<br><br> <code>napi_*_async_work</code> and <code>napi_*_threadsafe_function</code> are based on pthread and libuv port.</td><td>✅</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>libemnapi-basic.a</td><td>no atomics feature.<br><br> no libuv port.<br><br> <code>napi_*_async_work</code> and <code>napi_*_threadsafe_function</code> are imported from JavaScript land.</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>libemnapi-basic-mt.a</td><td>atomics feature enabled.<br><br> no libuv port.<br><br> <code>napi_*_async_work</code> and <code>napi_*_threadsafe_function</code> are imported from JavaScript land.<br><br> include <code>emnapi_async_worker_create</code> and <code>emnapi_async_worker_init</code> for WebWorker based async work implementation.</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>libdlmalloc.a</td><td>no atomics feature, no thread safe garanteed.</td><td>❌</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>libdlmalloc-mt.a</td><td>atomics feature enabled, thread safe.</td><td>❌</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>libemmalloc.a</td><td>no atomics feature, no thread safe garanteed.</td><td>❌</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>libemmalloc-mt.a</td><td>atomics feature enabled, thread safe.</td><td>❌</td><td>✅</td><td>❌</td><td>❌</td></tr></tbody></table><h2 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h2><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">add_subdirectory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${CMAKE_CURRENT_SOURCE_DIR}/node_modules/emnapi&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">add_executable</span><span style="color:#E1E4E8;">(hello hello.c)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">CMAKE_SYSTEM_NAME</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">STREQUAL</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Emscripten&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  target_link_libraries</span><span style="color:#E1E4E8;">(hello emnapi-mt)</span></span>
<span class="line"><span style="color:#F97583;">  target_compile_options</span><span style="color:#E1E4E8;">(hello </span><span style="color:#B392F0;">PRIVATE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-pthread&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  target_link_options(hello </span><span style="color:#B392F0;">PRIVATE</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-sALLOW_MEMORY_GROWTH=1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-sEXPORTED_FUNCTIONS=[&#39;_napi_register_wasm_v1&#39;,&#39;_node_api_module_get_api_version_v1&#39;,&#39;_malloc&#39;,&#39;_free&#39;]&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-pthread&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-sPTHREAD_POOL_SIZE=4&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># try to specify stack size if you experience pthread errors</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-sSTACK_SIZE=2MB&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-sDEFAULT_PTHREAD_STACK_SIZE=2MB&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#F97583;">elseif</span><span style="color:#E1E4E8;">(CMAKE_C_COMPILER_TARGET </span><span style="color:#F97583;">STREQUAL</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wasm32-wasi-threads&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># Experimental</span></span>
<span class="line"><span style="color:#F97583;">  target_link_libraries</span><span style="color:#E1E4E8;">(hello emnapi-mt)</span></span>
<span class="line"><span style="color:#F97583;">  set_target_properties</span><span style="color:#E1E4E8;">(hello PROPERTIES </span><span style="color:#B392F0;">SUFFIX</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.wasm&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  target_compile_options</span><span style="color:#E1E4E8;">(hello </span><span style="color:#B392F0;">PRIVATE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-fno-exceptions&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-pthread&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  target_link_options(hello </span><span style="color:#B392F0;">PRIVATE</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-pthread&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-mexec-model=reactor&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--import-memory&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--max-memory=2147483648&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export-dynamic&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export=malloc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export=free&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--import-undefined&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export-table&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#F97583;">elseif</span><span style="color:#E1E4E8;">((CMAKE_C_COMPILER_TARGET </span><span style="color:#F97583;">STREQUAL</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wasm32&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">OR</span><span style="color:#E1E4E8;"> (CMAKE_C_COMPILER_TARGET </span><span style="color:#F97583;">STREQUAL</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wasm32-unknown-unknown&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">  target_link_libraries</span><span style="color:#E1E4E8;">(hello emnapi-basic-mt)</span></span>
<span class="line"><span style="color:#F97583;">  set_target_properties</span><span style="color:#E1E4E8;">(hello PROPERTIES </span><span style="color:#B392F0;">SUFFIX</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.wasm&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  target_compile_options</span><span style="color:#E1E4E8;">(hello </span><span style="color:#B392F0;">PRIVATE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-fno-exceptions&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-matomics&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-mbulk-memory&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  target_link_options(hello </span><span style="color:#B392F0;">PRIVATE</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-nostdlib&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--no-entry&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export=napi_register_wasm_v1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export-if-defined=node_api_module_get_api_version_v1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export=emnapi_async_worker_create&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export=emnapi_async_worker_init&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--import-memory,--shared-memory,--max-memory=2147483648,--import-undefined&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;-Wl,--export-dynamic,--export=malloc,--export=free,--export-table&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#F97583;">endif</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">add_subdirectory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${CMAKE_CURRENT_SOURCE_DIR}/node_modules/emnapi&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">add_executable</span><span style="color:#24292E;">(hello hello.c)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">CMAKE_SYSTEM_NAME</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">STREQUAL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Emscripten&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">  target_link_libraries</span><span style="color:#24292E;">(hello emnapi-mt)</span></span>
<span class="line"><span style="color:#D73A49;">  target_compile_options</span><span style="color:#24292E;">(hello </span><span style="color:#6F42C1;">PRIVATE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-pthread&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  target_link_options(hello </span><span style="color:#6F42C1;">PRIVATE</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-sALLOW_MEMORY_GROWTH=1&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-sEXPORTED_FUNCTIONS=[&#39;_napi_register_wasm_v1&#39;,&#39;_node_api_module_get_api_version_v1&#39;,&#39;_malloc&#39;,&#39;_free&#39;]&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-pthread&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-sPTHREAD_POOL_SIZE=4&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># try to specify stack size if you experience pthread errors</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-sSTACK_SIZE=2MB&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-sDEFAULT_PTHREAD_STACK_SIZE=2MB&quot;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#D73A49;">elseif</span><span style="color:#24292E;">(CMAKE_C_COMPILER_TARGET </span><span style="color:#D73A49;">STREQUAL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wasm32-wasi-threads&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># Experimental</span></span>
<span class="line"><span style="color:#D73A49;">  target_link_libraries</span><span style="color:#24292E;">(hello emnapi-mt)</span></span>
<span class="line"><span style="color:#D73A49;">  set_target_properties</span><span style="color:#24292E;">(hello PROPERTIES </span><span style="color:#6F42C1;">SUFFIX</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.wasm&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">  target_compile_options</span><span style="color:#24292E;">(hello </span><span style="color:#6F42C1;">PRIVATE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-fno-exceptions&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-pthread&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  target_link_options(hello </span><span style="color:#6F42C1;">PRIVATE</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-pthread&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-mexec-model=reactor&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--import-memory&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--max-memory=2147483648&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export-dynamic&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export=malloc&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export=free&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--import-undefined&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export-table&quot;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#D73A49;">elseif</span><span style="color:#24292E;">((CMAKE_C_COMPILER_TARGET </span><span style="color:#D73A49;">STREQUAL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wasm32&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">OR</span><span style="color:#24292E;"> (CMAKE_C_COMPILER_TARGET </span><span style="color:#D73A49;">STREQUAL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wasm32-unknown-unknown&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">  target_link_libraries</span><span style="color:#24292E;">(hello emnapi-basic-mt)</span></span>
<span class="line"><span style="color:#D73A49;">  set_target_properties</span><span style="color:#24292E;">(hello PROPERTIES </span><span style="color:#6F42C1;">SUFFIX</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.wasm&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">  target_compile_options</span><span style="color:#24292E;">(hello </span><span style="color:#6F42C1;">PRIVATE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-fno-exceptions&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-matomics&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-mbulk-memory&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  target_link_options(hello </span><span style="color:#6F42C1;">PRIVATE</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-nostdlib&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--no-entry&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export=napi_register_wasm_v1&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export-if-defined=node_api_module_get_api_version_v1&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export=emnapi_async_worker_create&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export=emnapi_async_worker_init&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--import-memory,--shared-memory,--max-memory=2147483648,--import-undefined&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;-Wl,--export-dynamic,--export=malloc,--export=free,--export-table&quot;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#D73A49;">endif</span><span style="color:#24292E;">()</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">emcmake</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">-DEMNAPI_FIND_NODE_ADDON_API=ON</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">-DEMNAPI_WORKER_POOL_SIZE=4</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">-G</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Ninja</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-H.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Bbuild</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># wasi-sdk with thread support (Experimental)</span></span>
<span class="line"><span style="color:#B392F0;">cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DCMAKE_TOOLCHAIN_FILE=</span><span style="color:#E1E4E8;">$WASI_SDK_PATH</span><span style="color:#79B8FF;">/share/cmake/wasi-sdk-pthread.cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-DWASI_SDK_PREFIX=</span><span style="color:#E1E4E8;">$WASI_SDK_PATH</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-DEMNAPI_WORKER_POOL_SIZE=4</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-DEMNAPI_FIND_NODE_ADDON_API=ON</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-G</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Ninja</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-H.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Bbuild</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-DCMAKE_TOOLCHAIN_FILE=node_modules/emnapi/cmake/wasm32.cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-DLLVM_PREFIX=</span><span style="color:#E1E4E8;">$WASI_SDK_PATH</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">-G</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Ninja</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-H.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Bbuild</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">emcmake</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cmake</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">-DEMNAPI_FIND_NODE_ADDON_API=ON</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">-DEMNAPI_WORKER_POOL_SIZE=4</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">-G</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Ninja</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-H.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Bbuild</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># wasi-sdk with thread support (Experimental)</span></span>
<span class="line"><span style="color:#6F42C1;">cmake</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DCMAKE_TOOLCHAIN_FILE=</span><span style="color:#24292E;">$WASI_SDK_PATH</span><span style="color:#005CC5;">/share/cmake/wasi-sdk-pthread.cmake</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-DWASI_SDK_PREFIX=</span><span style="color:#24292E;">$WASI_SDK_PATH</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-DEMNAPI_WORKER_POOL_SIZE=4</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-DEMNAPI_FIND_NODE_ADDON_API=ON</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-G</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Ninja</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-H.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Bbuild</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">cmake</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-DCMAKE_TOOLCHAIN_FILE=node_modules/emnapi/cmake/wasm32.cmake</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-DLLVM_PREFIX=</span><span style="color:#24292E;">$WASI_SDK_PATH</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">-G</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Ninja</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-H.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Bbuild</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">cmake</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span></code></pre></div><h2 id="initialization" tabindex="-1">Initialization <a class="header-anchor" href="#initialization" aria-label="Permalink to &quot;Initialization&quot;">​</a></h2><p>Additional work is required during instantiating wasm compiled with non-emscripten.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// emnapi main thread (could be in a Worker)</span></span>
<span class="line"><span style="color:#B392F0;">instantiateNapiModule</span><span style="color:#E1E4E8;">(input, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  context: </span><span style="color:#B392F0;">getDefaultContext</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * emscripten</span></span>
<span class="line"><span style="color:#6A737D;">   *   0: no effect</span></span>
<span class="line"><span style="color:#6A737D;">   *   &gt; 0: the same effect to UV_THREADPOOL_SIZE</span></span>
<span class="line"><span style="color:#6A737D;">   * non-emscripten</span></span>
<span class="line"><span style="color:#6A737D;">   *   0: single thread mock</span></span>
<span class="line"><span style="color:#6A737D;">   *   &gt; 0 schedule async work in web worker</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  asyncWorkPoolSize: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 0: single thread mock, &gt; 0: schedule async work in web worker</span></span>
<span class="line"><span style="color:#E1E4E8;">  wasi: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WASI</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// reuseWorker: true,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onCreateWorker</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./worker.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Node.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// const { Worker } = require(&#39;worker_threads&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// return new Worker(join(__dirname, &#39;./worker.js&#39;), {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//   env: p<wbr>rocess.env,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//   execArgv: [&#39;--experimental-wasi-unstable-preview1&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">overwriteImports</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">importObject</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    importObject.env.memory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> WebAssembly.</span><span style="color:#B392F0;">Memory</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      initial: </span><span style="color:#79B8FF;">16777216</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">65536</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      maximum: </span><span style="color:#79B8FF;">2147483648</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">65536</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      shared: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// emnapi main thread (could be in a Worker)</span></span>
<span class="line"><span style="color:#6F42C1;">instantiateNapiModule</span><span style="color:#24292E;">(input, {</span></span>
<span class="line"><span style="color:#24292E;">  context: </span><span style="color:#6F42C1;">getDefaultContext</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * emscripten</span></span>
<span class="line"><span style="color:#6A737D;">   *   0: no effect</span></span>
<span class="line"><span style="color:#6A737D;">   *   &gt; 0: the same effect to UV_THREADPOOL_SIZE</span></span>
<span class="line"><span style="color:#6A737D;">   * non-emscripten</span></span>
<span class="line"><span style="color:#6A737D;">   *   0: single thread mock</span></span>
<span class="line"><span style="color:#6A737D;">   *   &gt; 0 schedule async work in web worker</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  asyncWorkPoolSize: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 0: single thread mock, &gt; 0: schedule async work in web worker</span></span>
<span class="line"><span style="color:#24292E;">  wasi: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WASI</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// reuseWorker: true,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onCreateWorker</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./worker.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Node.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// const { Worker } = require(&#39;worker_threads&#39;)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// return new Worker(join(__dirname, &#39;./worker.js&#39;), {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//   env: p<wbr>rocess.env,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//   execArgv: [&#39;--experimental-wasi-unstable-preview1&#39;]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">overwriteImports</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">importObject</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    importObject.env.memory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> WebAssembly.</span><span style="color:#6F42C1;">Memory</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      initial: </span><span style="color:#005CC5;">16777216</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">65536</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      maximum: </span><span style="color:#005CC5;">2147483648</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">65536</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      shared: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// worker.js</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fs, </span><span style="color:#79B8FF;">WASI</span><span style="color:#E1E4E8;">, emnapiCore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ENVIRONMENT_IS_NODE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> process </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> process </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> process.versions </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> process.versions </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> process.versions.node </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">ENVIRONMENT_IS_NODE</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nodeWorkerThreads</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;worker_threads&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parentPort</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodeWorkerThreads.parentPort</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    parentPort.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      globalThis.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;">({ data })</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(globalThis, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      self: globalThis,</span></span>
<span class="line"><span style="color:#E1E4E8;">      require,</span></span>
<span class="line"><span style="color:#E1E4E8;">      Worker: nodeWorkerThreads.Worker,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">importScripts</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">f</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, eval)(fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(f, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;//# sourceURL=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> f)</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        parentPort.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">WASI</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;wasi&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">WASI</span></span>
<span class="line"><span style="color:#E1E4E8;">    emnapiCore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@emnapi/core&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">importScripts</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./node_modules/memfs-browser/dist/memfs.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">importScripts</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./node_modules/@tybys/wasm-util/dist/wasm-util.min.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">importScripts</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./node_modules/@emnapi/core/dist/emnapi-core.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    emnapiCore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> globalThis.emnapiCore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">Volume</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">createFsFromVolume</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> memfs</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createFsFromVolume</span><span style="color:#E1E4E8;">(Volume.</span><span style="color:#B392F0;">fromJSON</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    }))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">WASI</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> globalThis.wasmUtil.</span><span style="color:#79B8FF;">WASI</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">instantiateNapiModuleSync</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">MessageHandler</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> emnapiCore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageHandler</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onLoad</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">wasmModule</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">wasmMemory</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wasi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WASI</span><span style="color:#E1E4E8;">({ fs })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instantiateNapiModuleSync</span><span style="color:#E1E4E8;">(wasmModule, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        childThread: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        wasi,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">overwriteImports</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">importObject</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          importObject.env.memory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wasmMemory</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  globalThis.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// handle other messages</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// worker.js</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fs, </span><span style="color:#005CC5;">WASI</span><span style="color:#24292E;">, emnapiCore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ENVIRONMENT_IS_NODE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> process </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> process </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> process.versions </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> process.versions </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> process.versions.node </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">ENVIRONMENT_IS_NODE</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nodeWorkerThreads</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;worker_threads&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parentPort</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nodeWorkerThreads.parentPort</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    parentPort.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      globalThis.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;">({ data })</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(globalThis, {</span></span>
<span class="line"><span style="color:#24292E;">      self: globalThis,</span></span>
<span class="line"><span style="color:#24292E;">      require,</span></span>
<span class="line"><span style="color:#24292E;">      Worker: nodeWorkerThreads.Worker,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">importScripts</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">f</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, eval)(fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(f, </span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;//# sourceURL=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> f)</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        parentPort.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">(msg)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">WASI</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;wasi&#39;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">WASI</span></span>
<span class="line"><span style="color:#24292E;">    emnapiCore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@emnapi/core&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">importScripts</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./node_modules/memfs-browser/dist/memfs.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">importScripts</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./node_modules/@tybys/wasm-util/dist/wasm-util.min.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">importScripts</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./node_modules/@emnapi/core/dist/emnapi-core.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    emnapiCore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> globalThis.emnapiCore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">Volume</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">createFsFromVolume</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> memfs</span></span>
<span class="line"><span style="color:#24292E;">    fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createFsFromVolume</span><span style="color:#24292E;">(Volume.</span><span style="color:#6F42C1;">fromJSON</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    }))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">WASI</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> globalThis.wasmUtil.</span><span style="color:#005CC5;">WASI</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">instantiateNapiModuleSync</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">MessageHandler</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> emnapiCore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageHandler</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onLoad</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">wasmModule</span><span style="color:#24292E;">, </span><span style="color:#E36209;">wasmMemory</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wasi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WASI</span><span style="color:#24292E;">({ fs })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instantiateNapiModuleSync</span><span style="color:#24292E;">(wasmModule, {</span></span>
<span class="line"><span style="color:#24292E;">        childThread: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        wasi,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">overwriteImports</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">importObject</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          importObject.env.memory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wasmMemory</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  globalThis.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    handler.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// handle other messages</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})()</span></span></code></pre></div><h2 id="preprocess-macro-options" tabindex="-1">Preprocess Macro Options <a class="header-anchor" href="#preprocess-macro-options" aria-label="Permalink to &quot;Preprocess Macro Options&quot;">​</a></h2><h3 id="demnapi-worker-pool-size-4" tabindex="-1"><code>-DEMNAPI_WORKER_POOL_SIZE=4</code> <a class="header-anchor" href="#demnapi-worker-pool-size-4" aria-label="Permalink to &quot;\`-DEMNAPI_WORKER_POOL_SIZE=4\`&quot;">​</a></h3><p>This is <a href="http://docs.libuv.org/en/v1.x/threadpool.html?highlight=UV_THREADPOOL_SIZE" target="_blank" rel="noreferrer"><code>UV_THREADPOOL_SIZE</code></a> equivalent at compile time, if not predefined, emnapi will read <code>asyncWorkPoolSize</code> option or <code>UV_THREADPOOL_SIZE</code> from Emscripten <a href="https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#interacting-with-code-environment-variables" target="_blank" rel="noreferrer">environment variable</a> at runtime:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Module.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  asyncWorkPoolSize: </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// if asyncWorkPoolSize is not specified</span></span>
<span class="line"><span style="color:#E1E4E8;">Module.preRun </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Module.preRun </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">Module.preRun.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ENV</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">UV_THREADPOOL_SIZE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Module.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  asyncWorkPoolSize: </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// if asyncWorkPoolSize is not specified</span></span>
<span class="line"><span style="color:#24292E;">Module.preRun </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Module.preRun </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">Module.preRun.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ENV</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">UV_THREADPOOL_SIZE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// wasi</span></span>
<span class="line"><span style="color:#B392F0;">instantiateNapiModule</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  asyncWorkPoolSize: </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// if asyncWorkPoolSize is not specified</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WASI</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  env: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    UV_THREADPOOL_SIZE: </span><span style="color:#9ECBFF;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// wasi</span></span>
<span class="line"><span style="color:#6F42C1;">instantiateNapiModule</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  asyncWorkPoolSize: </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// if asyncWorkPoolSize is not specified</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WASI</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  env: {</span></span>
<span class="line"><span style="color:#24292E;">    UV_THREADPOOL_SIZE: </span><span style="color:#032F62;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>It represent max of <code>EMNAPI_WORKER_POOL_SIZE</code> async work (<code>napi_queue_async_work</code>) can be executed in parallel. Default is not defined.</p><p>You can set both <code>PTHREAD_POOL_SIZE</code> and <code>EMNAPI_WORKER_POOL_SIZE</code> to <code>number of CPU cores</code> in general. If you use another library function which may create <code>N</code> child threads in async work, then you need to set <code>PTHREAD_POOL_SIZE</code> to <code>EMNAPI_WORKER_POOL_SIZE * (N + 1)</code>.</p><p>This option only has effect if you use <code>-pthread</code>. Emnapi will create <code>EMNAPI_WORKER_POOL_SIZE</code> threads when initializing, it will throw error if <code>PTHREAD_POOL_SIZE &lt; EMNAPI_WORKER_POOL_SIZE &amp;&amp; PTHREAD_POOL_SIZE_STRICT == 2</code>.</p><p>See <a href="https://github.com/toyobayashi/emnapi/issues/8" target="_blank" rel="noreferrer">Issue #8</a> for more detail.</p><h3 id="demnapi-nexttick-type-0" tabindex="-1"><code>-DEMNAPI_NEXTTICK_TYPE=0</code> <a class="header-anchor" href="#demnapi-nexttick-type-0" aria-label="Permalink to &quot;\`-DEMNAPI_NEXTTICK_TYPE=0\`&quot;">​</a></h3><p>This option only has effect if you use <code>-pthread</code>, Default is <code>0</code>. Tell emnapi how to delay async work in <code>uv_async_send</code> / <code>uv__async_close</code>.</p><ul><li><code>0</code>: Use <code>setImmediate()</code> (Node.js native <code>setImmediate</code> or browser <code>MessageChannel</code> and <code>port.postMessage</code>)</li><li><code>1</code>: Use <code>Promise.resolve().then()</code></li></ul><h3 id="demnapi-use-proxying-1" tabindex="-1"><code>-DEMNAPI_USE_PROXYING=1</code> <a class="header-anchor" href="#demnapi-use-proxying-1" aria-label="Permalink to &quot;\`-DEMNAPI_USE_PROXYING=1\`&quot;">​</a></h3><p>This option only has effect if you use emscripten <code>-pthread</code>. Default is <code>1</code> if emscripten version <code>&gt;= 3.1.9</code>, else <code>0</code>.</p><ul><li><p><code>0</code></p><p>Use JavaScript implementation to send async work from worker threads, runtime code will access the Emscripten internal <code>PThread</code> object to add custom worker message listener.</p></li><li><p><code>1</code>:</p><p>Use Emscripten <a href="https://emscripten.org/docs/api_reference/proxying.h.html" target="_blank" rel="noreferrer">proxying API</a> to send async work from worker threads in C. If you experience something wrong, you can switch set this to <code>0</code> and feel free to create an issue.</p></li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>Estimate the value of π by using a Monte Carlo method in child threads. Take <code>points</code> samples of random x and y values on a [0,1][0,1] plane. Calculating the length of the diagonal tells us whether the point lies inside, or outside a quarter circle running from 0,1 to 1,0. The ratio of the number of points inside to outside gives us an approximation of π/4.</p><p>Exposed function signature:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;"> * This function creates a child thread if</span></span>
<span class="line"><span style="color:#6A737D;"> * there are idle threads in the thread pool.</span></span>
<span class="line"><span style="color:#6A737D;"> * Callback will be called in main thread after calculating.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">estimate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">points</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;"> * This function creates a child thread if</span></span>
<span class="line"><span style="color:#6A737D;"> * there are idle threads in the thread pool.</span></span>
<span class="line"><span style="color:#6A737D;"> * Callback will be called in main thread after calculating.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">points</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">callback</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">err</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">err</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span></span></code></pre></div><p>Use case:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Module.</span><span style="color:#B392F0;">onRuntimeInitialized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">calculations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100000000</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">batches</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ended </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">ended </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> batches) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// have all the batches finished executing</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> batches</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ms</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">π ≈ &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> pi </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">&#39; (&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(pi </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#79B8FF;">PI</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; away from actual)&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">Took &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ms </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ms&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> batches; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Module.emnapiExports.</span><span style="color:#B392F0;">estimate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100000000</span><span style="color:#E1E4E8;">, done)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Module.</span><span style="color:#6F42C1;">onRuntimeInitialized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">calculations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100000000</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">batches</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ended </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">ended </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> batches) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// have all the batches finished executing</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> batches</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ms</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">π ≈ &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pi </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&#39; (&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(pi </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Math.</span><span style="color:#005CC5;">PI</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; away from actual)&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">Took &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ms </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ms&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> batches; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i) {</span></span>
<span class="line"><span style="color:#24292E;">    Module.emnapiExports.</span><span style="color:#6F42C1;">estimate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100000000</span><span style="color:#24292E;">, done)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>C implementation:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;pthread.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__cplusplus</span></span>
<span class="line"><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">monte_carlo_estimate_pi</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__cplusplus</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">pthread_mutex_t</span><span style="color:#E1E4E8;"> mutex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PTHREAD_MUTEX_INITIALIZER;</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> randseed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">monte_carlo_estimate_pi</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> points;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> inside </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> seed;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pthread_mutex_lock</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">mutex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (randseed </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    randseed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">time</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  seed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rand_r</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">randseed);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pthread_mutex_unlock</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">mutex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> rand_max </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">) RAND_MAX;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rand_r</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">seed) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> rand_max;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rand_r</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">seed) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> rand_max;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((x </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> x) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (y </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> y) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">inside;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (inside </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">) points) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;pthread.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__cplusplus</span></span>
<span class="line"><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">monte_carlo_estimate_pi</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">points</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__cplusplus</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">pthread_mutex_t</span><span style="color:#24292E;"> mutex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PTHREAD_MUTEX_INITIALIZER;</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> randseed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">monte_carlo_estimate_pi</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">points</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> points;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> inside </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> seed;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pthread_mutex_lock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">mutex);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (randseed </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    randseed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  seed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rand_r</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">randseed);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pthread_mutex_unlock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">mutex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> rand_max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">) RAND_MAX;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rand_r</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">seed) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> rand_max;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rand_r</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">seed) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> rand_max;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((x </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> x) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (y </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> y) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">inside;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (inside </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">) points) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="node-api-implementation" tabindex="-1">Node-API Implementation <a class="header-anchor" href="#node-api-implementation" aria-label="Permalink to &quot;Node-API Implementation&quot;">​</a></h2><h3 id="helper-macros-and-initialization" tabindex="-1">Helper Macros and Initialization <a class="header-anchor" href="#helper-macros-and-initialization" aria-label="Permalink to &quot;Helper Macros and Initialization&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node_api.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NAPI_CALL_BASE</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">the_call</span><span style="color:#E1E4E8;">, ...)</span><span style="color:#6A737D;"> /* ... */</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">the_call</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">           /* ... */</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">the_call</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">      /* ... */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NAPI_MODULE_INIT</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value estimate_fn;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_create_function</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;estimate&quot;</span><span style="color:#E1E4E8;">, NAPI_AUTO_LENGTH,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      js_estimate, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">estimate_fn));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_set_named_property</span><span style="color:#E1E4E8;">(env, exports,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                         </span><span style="color:#9ECBFF;">&quot;estimate&quot;</span><span style="color:#E1E4E8;">, estimate_fn));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node_api.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NAPI_CALL_BASE</span><span style="color:#24292E;">(</span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#E36209;">the_call</span><span style="color:#24292E;">, ...)</span><span style="color:#6A737D;"> /* ... */</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(</span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#E36209;">the_call</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">           /* ... */</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(</span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#E36209;">the_call</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">      /* ... */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NAPI_MODULE_INIT</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  napi_value estimate_fn;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_create_function</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;estimate&quot;</span><span style="color:#24292E;">, NAPI_AUTO_LENGTH,</span></span>
<span class="line"><span style="color:#24292E;">                                      js_estimate, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">estimate_fn));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_set_named_property</span><span style="color:#24292E;">(env, exports,</span></span>
<span class="line"><span style="color:#24292E;">                                         </span><span style="color:#032F62;">&quot;estimate&quot;</span><span style="color:#24292E;">, estimate_fn));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exports;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="binding-function" tabindex="-1">Binding Function <a class="header-anchor" href="#binding-function" aria-label="Permalink to &quot;Binding Function&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> points;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_ref callback;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_async_work work;</span></span>
<span class="line"><span style="color:#E1E4E8;">} estimate_request;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> napi_value </span><span style="color:#B392F0;">js_estimate</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, napi_callback_info </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_cb_info</span><span style="color:#E1E4E8;">(env, info, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">argc, args, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (argc </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_valuetype valuetype0, valuetype1;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_typeof</span><span style="color:#E1E4E8;">(env, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">valuetype0));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_typeof</span><span style="color:#E1E4E8;">(env, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">valuetype1));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valuetype0 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_number </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> valuetype1 </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_function) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  estimate_request</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    (estimate_request</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(estimate_request));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">napi_throw_type_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;malloc failed&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_status status;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_get_value_int32</span><span style="color:#E1E4E8;">(env, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">request-&gt;points);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, status);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_create_reference</span><span style="color:#E1E4E8;">(env, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">request-&gt;callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, status);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_create_async_work</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  estimate_on_execute,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  estimate_on_complete,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  request,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                  </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">request-&gt;work);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, status);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_queue_async_work</span><span style="color:#E1E4E8;">(env, request-&gt;work);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL</span><span style="color:#E1E4E8;">(env, status);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> points;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">  napi_ref callback;</span></span>
<span class="line"><span style="color:#24292E;">  napi_async_work work;</span></span>
<span class="line"><span style="color:#24292E;">} estimate_request;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> napi_value </span><span style="color:#6F42C1;">js_estimate</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, napi_callback_info </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  napi_value </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_cb_info</span><span style="color:#24292E;">(env, info, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">argc, args, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (argc </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_valuetype valuetype0, valuetype1;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_typeof</span><span style="color:#24292E;">(env, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">valuetype0));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_typeof</span><span style="color:#24292E;">(env, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">valuetype1));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (valuetype0 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_number </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> valuetype1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_function) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  estimate_request</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    (estimate_request</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(estimate_request));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">request) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">napi_throw_type_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;malloc failed&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_status status;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_get_value_int32</span><span style="color:#24292E;">(env, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">request-&gt;points);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, status);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_create_reference</span><span style="color:#24292E;">(env, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">request-&gt;callback);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, status);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_create_async_work</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                  estimate_on_execute,</span></span>
<span class="line"><span style="color:#24292E;">                                  estimate_on_complete,</span></span>
<span class="line"><span style="color:#24292E;">                                  request,</span></span>
<span class="line"><span style="color:#24292E;">                                  </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">request-&gt;work);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, status);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_queue_async_work</span><span style="color:#24292E;">(env, request-&gt;work);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL</span><span style="color:#24292E;">(env, status);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="execute" tabindex="-1">Execute <a class="header-anchor" href="#execute" aria-label="Permalink to &quot;Execute&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// invoked in child thread</span></span>
<span class="line"><span style="color:#6A737D;">// can not interact with JavaScript</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">estimate_on_execute</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  estimate_request</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (estimate_request</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  request-&gt;result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">monte_carlo_estimate_pi</span><span style="color:#E1E4E8;">(request-&gt;points);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// invoked in child thread</span></span>
<span class="line"><span style="color:#6A737D;">// can not interact with JavaScript</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate_on_execute</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  estimate_request</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (estimate_request</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) data;</span></span>
<span class="line"><span style="color:#24292E;">  request-&gt;result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">monte_carlo_estimate_pi</span><span style="color:#24292E;">(request-&gt;points);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="complete" tabindex="-1">Complete <a class="header-anchor" href="#complete" aria-label="Permalink to &quot;Complete&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// invoked in main thread</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">estimate_on_complete</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, napi_status </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  estimate_request</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> req </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (estimate_request</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  estimate_request request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">req;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(req);</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value undefined, callback, callback_ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_undefined</span><span style="color:#E1E4E8;">(env, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">undefined));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_reference_value</span><span style="color:#E1E4E8;">(env,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                               request.callback,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                               </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">callback));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    napi_value err, errmsg;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_create_string_utf8</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Execute failed.&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                NAPI_AUTO_LENGTH,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">errmsg));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_create_error</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, errmsg, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">err));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_call_function</span><span style="color:#E1E4E8;">(env, undefined, callback,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                           </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">err, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">callback_ret));</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    napi_value </span><span style="color:#FFAB70;">callback_argv</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_get_null</span><span style="color:#E1E4E8;">(env, callback_argv));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_create_double</span><span style="color:#E1E4E8;">(env,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                          request.result, callback_argv </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_call_function</span><span style="color:#E1E4E8;">(env, undefined, callback,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                          </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, callback_argv, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">callback_ret));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_delete_reference</span><span style="color:#E1E4E8;">(env, request.callback));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_delete_async_work</span><span style="color:#E1E4E8;">(env, request.work));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// invoked in main thread</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate_on_complete</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, napi_status </span><span style="color:#E36209;">status</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  estimate_request</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> req </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (estimate_request</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) data;</span></span>
<span class="line"><span style="color:#24292E;">  estimate_request request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">req;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(req);</span></span>
<span class="line"><span style="color:#24292E;">  napi_value undefined, callback, callback_ret;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_undefined</span><span style="color:#24292E;">(env, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">undefined));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_reference_value</span><span style="color:#24292E;">(env,</span></span>
<span class="line"><span style="color:#24292E;">                                               request.callback,</span></span>
<span class="line"><span style="color:#24292E;">                                               </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">callback));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) {</span></span>
<span class="line"><span style="color:#24292E;">    napi_value err, errmsg;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_create_string_utf8</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Execute failed.&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                NAPI_AUTO_LENGTH,</span></span>
<span class="line"><span style="color:#24292E;">                                                </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">errmsg));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_create_error</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, errmsg, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">err));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_call_function</span><span style="color:#24292E;">(env, undefined, callback,</span></span>
<span class="line"><span style="color:#24292E;">                                           </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">err, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">callback_ret));</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    napi_value </span><span style="color:#E36209;">callback_argv</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_get_null</span><span style="color:#24292E;">(env, callback_argv));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_create_double</span><span style="color:#24292E;">(env,</span></span>
<span class="line"><span style="color:#24292E;">                                          request.result, callback_argv </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_call_function</span><span style="color:#24292E;">(env, undefined, callback,</span></span>
<span class="line"><span style="color:#24292E;">                                          </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, callback_argv, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">callback_ret));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_delete_reference</span><span style="color:#24292E;">(env, request.callback));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_delete_async_work</span><span style="color:#24292E;">(env, request.work));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="return-promise" tabindex="-1">Return Promise <a class="header-anchor" href="#return-promise" aria-label="Permalink to &quot;Return Promise&quot;">​</a></h3><p>Function signature:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">estimate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">points</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">points</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Request structure:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> points;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_deferred deferred;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_async_work work;</span></span>
<span class="line"><span style="color:#E1E4E8;">} estimate_request;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> points;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">  napi_deferred deferred;</span></span>
<span class="line"><span style="color:#24292E;">  napi_async_work work;</span></span>
<span class="line"><span style="color:#24292E;">} estimate_request;</span></span></code></pre></div><p>Return promise:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> napi_value </span><span style="color:#B392F0;">js_estimate</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, napi_callback_info </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value promise;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">napi_create_promise</span><span style="color:#E1E4E8;">(env, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">request-&gt;deferred, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">promise);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> promise;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> napi_value </span><span style="color:#6F42C1;">js_estimate</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, napi_callback_info </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  napi_value promise;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">napi_create_promise</span><span style="color:#24292E;">(env, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">request-&gt;deferred, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">promise);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> promise;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Resolve or reject on complete</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">estimate_on_complete</span><span style="color:#E1E4E8;">(napi_env </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, napi_status </span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_reject_deferred</span><span style="color:#E1E4E8;">(env, request.deferred, err));</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_CALL_VOID</span><span style="color:#E1E4E8;">(env, </span><span style="color:#B392F0;">napi_resolve_deferred</span><span style="color:#E1E4E8;">(env, request.deferred, </span><span style="color:#FFAB70;">callback_argv</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate_on_complete</span><span style="color:#24292E;">(napi_env </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, napi_status </span><span style="color:#E36209;">status</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_reject_deferred</span><span style="color:#24292E;">(env, request.deferred, err));</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_CALL_VOID</span><span style="color:#24292E;">(env, </span><span style="color:#6F42C1;">napi_resolve_deferred</span><span style="color:#24292E;">(env, request.deferred, </span><span style="color:#E36209;">callback_argv</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="node-addon-api-implementation" tabindex="-1">node-addon-api Implementation <a class="header-anchor" href="#node-addon-api-implementation" aria-label="Permalink to &quot;node-addon-api Implementation&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>can not</strong> use node-addon-api if the runtime does not support <code>FinalizationRegistry</code> and <code>WeakRef</code>.</p></div><ul><li><a href="https://github.com/nodejs/node-addon-api/blob/v5.0.0/doc/async_worker.md" target="_blank" rel="noreferrer">node-addon-api AsyncWorker Class</a></li></ul><h3 id="binding-function-1" tabindex="-1">Binding Function <a class="header-anchor" href="#binding-function-1" aria-label="Permalink to &quot;Binding Function&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;napi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsEstimate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Env env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">IsNumber</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">info[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">IsFunction</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> points </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Number</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Uint32Value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Function callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">auto*</span><span style="color:#E1E4E8;"> piWorker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MonteCarloEstimatePiWorker</span><span style="color:#E1E4E8;">(points, callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">  piWorker-&gt;</span><span style="color:#B392F0;">Queue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Undefined</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  exports.</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;estimate&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, JsEstimate, </span><span style="color:#9ECBFF;">&quot;estimate&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_API_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;napi.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsEstimate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Env env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.</span><span style="color:#6F42C1;">Length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">IsNumber</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">info[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">IsFunction</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> points </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Number</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Uint32Value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Function callback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">auto*</span><span style="color:#24292E;"> piWorker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MonteCarloEstimatePiWorker</span><span style="color:#24292E;">(points, callback);</span></span>
<span class="line"><span style="color:#24292E;">  piWorker-&gt;</span><span style="color:#6F42C1;">Queue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Undefined</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  exports.</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;estimate&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, JsEstimate, </span><span style="color:#032F62;">&quot;estimate&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exports;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_API_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Init)</span></span></code></pre></div><h3 id="extending-asyncworker-class" tabindex="-1">Extending AsyncWorker Class <a class="header-anchor" href="#extending-asyncworker-class" aria-label="Permalink to &quot;Extending AsyncWorker Class&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MonteCarloEstimatePiWorker</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">AsyncWorker</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MonteCarloEstimatePiWorker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Function</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      : Napi::</span><span style="color:#B392F0;">AsyncWorker</span><span style="color:#E1E4E8;">(callback), </span><span style="color:#B392F0;">points_</span><span style="color:#E1E4E8;">(points), </span><span style="color:#B392F0;">result_</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Execute</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // in child thread</span></span>
<span class="line"><span style="color:#E1E4E8;">    result_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">monte_carlo_estimate_pi</span><span style="color:#E1E4E8;">(points_);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnOK</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // in main thread</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Callback</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Call</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Undefined</span><span style="color:#E1E4E8;">(), {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Null</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">(), result_)</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnError</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Error</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // in main thread</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Callback</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Call</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Undefined</span><span style="color:#E1E4E8;">(), { e.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">() });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> points_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> result_;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MonteCarloEstimatePiWorker</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">AsyncWorker</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MonteCarloEstimatePiWorker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">points</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Function</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      : Napi::</span><span style="color:#6F42C1;">AsyncWorker</span><span style="color:#24292E;">(callback), </span><span style="color:#6F42C1;">points_</span><span style="color:#24292E;">(points), </span><span style="color:#6F42C1;">result_</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Execute</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // in child thread</span></span>
<span class="line"><span style="color:#24292E;">    result_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">monte_carlo_estimate_pi</span><span style="color:#24292E;">(points_);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnOK</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // in main thread</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Callback</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Call</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Undefined</span><span style="color:#24292E;">(), {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Null</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">(), result_)</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnError</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Error</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // in main thread</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Callback</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Call</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Undefined</span><span style="color:#24292E;">(), { e.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">() });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> points_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> result_;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="return-promise-1" tabindex="-1">Return Promise <a class="header-anchor" href="#return-promise-1" aria-label="Permalink to &quot;Return Promise&quot;">​</a></h3><p>Function signature:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">estimate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">points</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">points</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MonteCarloEstimatePiWorker</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">AsyncWorker</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MonteCarloEstimatePiWorker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">points</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Deferred</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">deferred</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      : Napi::</span><span style="color:#B392F0;">AsyncWorker</span><span style="color:#E1E4E8;">(deferred.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">points_</span><span style="color:#E1E4E8;">(points),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">result_</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">deferred_</span><span style="color:#E1E4E8;">(deferred) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Execute</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    result_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">monte_carlo_estimate_pi</span><span style="color:#E1E4E8;">(points_);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnOK</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    deferred_.</span><span style="color:#B392F0;">Resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">(), result_));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnError</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Error</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    deferred_.</span><span style="color:#B392F0;">Reject</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> points_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> result_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">::Deferred deferred_;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsEstimate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CallbackInfo</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Env env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">IsNumber</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::TypeError e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">NAPI_THROW</span><span style="color:#E1E4E8;">(e, </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> points </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::Number</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Uint32Value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">::Deferred deferred </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Napi</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Deferred</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(env);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">auto*</span><span style="color:#E1E4E8;"> piWorker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MonteCarloEstimatePiWorker</span><span style="color:#E1E4E8;">(points, deferred);</span></span>
<span class="line"><span style="color:#E1E4E8;">  piWorker-&gt;</span><span style="color:#B392F0;">Queue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> deferred.</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MonteCarloEstimatePiWorker</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">AsyncWorker</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MonteCarloEstimatePiWorker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">points</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Deferred</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">deferred</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      : Napi::</span><span style="color:#6F42C1;">AsyncWorker</span><span style="color:#24292E;">(deferred.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">points_</span><span style="color:#24292E;">(points),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">result_</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">deferred_</span><span style="color:#24292E;">(deferred) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Execute</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    result_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">monte_carlo_estimate_pi</span><span style="color:#24292E;">(points_);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnOK</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    deferred_.</span><span style="color:#6F42C1;">Resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">(), result_));</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnError</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Error</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    deferred_.</span><span style="color:#6F42C1;">Reject</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> points_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> result_;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">::Deferred deferred_;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsEstimate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CallbackInfo</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Env env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.</span><span style="color:#6F42C1;">Length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">IsNumber</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::TypeError e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">NAPI_THROW</span><span style="color:#24292E;">(e, </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> points </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::Number</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Uint32Value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">::Deferred deferred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Napi</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Deferred</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(env);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">auto*</span><span style="color:#24292E;"> piWorker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MonteCarloEstimatePiWorker</span><span style="color:#24292E;">(points, deferred);</span></span>
<span class="line"><span style="color:#24292E;">  piWorker-&gt;</span><span style="color:#6F42C1;">Queue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> deferred.</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,71),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const _=s(p,[["render",t]]);export{u as __pageData,_ as default};
